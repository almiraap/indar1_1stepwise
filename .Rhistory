# Melakukan stepwise regression
stepwise_model <- step(initial_model, direction = "both")
# Menampilkan ringkasan model akhir
summary(stepwise_model)
# Memastikan test_data memiliki fitur yang sama dengan train_data
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
train_X <- dplyr::select(train_data_combined, -jumlah_penumpang)
# Memastikan test_data memiliki fitur yang sama dengan train_data
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
# Memprediksi menggunakan model stepwise
predictions <- predict(stepwise_model, newdata = test_X)
# Memisahkan fitur dan target dalam data pelatihan
train_X <- dplyr::select(train_data_combined, -jumlah_penumpang)
train_y <- train_data$jumlah_penumpang_tj
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang_tj = train_y)
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang = train_y)
train_y <- train_data$jumlah_penumpang
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang = train_y)
# Model awal dengan semua fitur
initial_model <- lm(jumlah_penumpang ~ ., data = train_combined)
# Melakukan stepwise regression
stepwise_model <- step(initial_model, direction = "both")
# Menampilkan ringkasan model akhir
summary(stepwise_model)
# Memastikan test_data memiliki fitur yang sama dengan train_data
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
# Memprediksi menggunakan model stepwise
predictions <- predict(stepwise_model, newdata = test_X)
# Memastikan test_data memiliki fitur yang sama dengan train_data
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
# Memastikan test_data memiliki fitur yang sama dengan train_data
library(dplyr)
columns_to_select<-colnames(train_X)
test_X <- test_data %>%
select(all_of(columns_to_select))
head(train_X)
test_X <- test_data %>%
select(names(train_combined))  # Memastikan kolom yang sama
colnames(train_X)
colnames(train_y)
train_y <- train_data$jumlah_penumpang
colnames(train_y)
head(train_data)
colnames(train_X)
train_y <- dplyr::select(train_data$jumlah_penumpang)
train_y <- dplyr::select(train_data, jumlah_penumpang)
colnames(train_X)
colnames(train_y)
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang = train_y)
# Model awal dengan semua fitur
initial_model <- lm(jumlah_penumpang ~ ., data = train_combined)
# Melakukan stepwise regression
stepwise_model <- step(initial_model, direction = "both")
# Menampilkan ringkasan model akhir
summary(stepwise_model)
test_X <- test_data %>%
select(names(train_combined))  # Memastikan kolom yang sama
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
head(train_X)
columns_to_select<-colnames(train_X)
test_X <- test_data %>%
select(all_of(columns_to_select))
test_X <- test_data %>%
select(names(train_y))  # Memastikan kolom yang sama
columns_to_select
# Memisahkan fitur dan target dalam data pelatihan
train_X <- dplyr::select(datax, -jumlah_penumpang)
# Memisahkan fitur dan target dalam data pelatihan
train_X <- dplyr::select(datax, -jumlah_penumpang_tj)
# Memisahkan fitur dan target dalam data pelatihan
colnames(datax)
train_X <- dplyr::select(datax)
train_y <- dplyr::select(train_data, jumlah_penumpang)
colnames(train_X)
train_X <- (datax)
train_y <- dplyr::select(train_data, jumlah_penumpang)
colnames(train_X)
colnames(train_y)
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang = train_y)
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang_tj = train_y)
# Memisahkan fitur dan target dalam data pelatihan
colnames(datax)
train_y <- dplyr::select(train_data, jumlah_penumpang_tj)
colnames(train_data)
colnames(train_data)<-c("bulan","tahun","jumlah_penumpang_tj","date","jumlah_armada_tj","jumlah_penumpang_lrt",
"jumlah_perjalanan_lrt","jumlah_penumpang_mrt","jumlah_perjalanan_mrt")
colnames(train_data)
train_y <- dplyr::select(train_data, jumlah_penumpang_tj)
colnames(train_X)
colnames(train_y)
# Menggabungkan data fitur dan target untuk membuat model
train_combined <- cbind(train_X, jumlah_penumpang_tj = train_y)
# Model awal dengan semua fitur
initial_model <- lm(jumlah_penumpang ~ ., data = train_combined)
# Melakukan stepwise regression
stepwise_model <- step(initial_model, direction = "both")
# Menampilkan ringkasan model akhir
summary(stepwise_model)
# Memastikan test_data memiliki fitur yang sama dengan train_data
library(dplyr)
head(train_X)
columns_to_select<-colnames(train_X)
columns_to_select
test_X <- test_data %>%
select(all_of(columns_to_select))
test_X <- test_data %>%
select(names(train_y))  # Memastikan kolom yang sama
test_X <- test_data %>%
select(names(train_X))  # Memastikan kolom yang sama
head(train_data)
train_X <- train_data %>%
select(-jumlah_penumpang_tj)
colnames(train_data)
#membaca file csv
arm_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_armada_tj.csv")
colnames(arm_tj)
head(arm_tj)
pen_lrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_penumpang_lrt.csv")
colnames(pen_lrt)
colnames(pen_lrt)<-c("bulan","tahun","jumlah_penumpang_lrt")
colnames(pen_lrt)
head(pen_lrt)
pen_mrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_penumpang_mrt.csv")
colnames(pen_mrt)<-c("bulan","tahun","jumlah_penumpang_mrt")
colnames(pen_mrt)
head(pen_mrt)
perj_lrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_perjalanan_lrt.csv")
colnames(perj_lrt)
colnames(perj_lrt)<-c("bulan","tahun","jumlah_perjalanan_lrt")
colnames(perj_lrt)
head(perj_lrt)
perj_mrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_perjalanan_mrt.csv")
colnames(perj_mrt)
colnames(perj_mrt)<-c("bulan","tahun","jumlah_perjalanan_mrt")
colnames(perj_mrt)
head(perj_mrt)
#lihat data test & training
samsub<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/sample_submision.csv")
test_pen_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/testing_jumlah_penumpang_tj.csv")
train_pen_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/training_jumlah_penumpang_tj.csv")
head(test_pen_tj)
head(train_pen_tj)
tail(train_pen_tj)
#====================dataset
#membaca file csv
arm_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_armada_tj.csv")
colnames(arm_tj)
head(arm_tj)
pen_lrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_penumpang_lrt.csv")
colnames(pen_lrt)<-c("bulan","tahun","jumlah_penumpang_lrt")
colnames(pen_lrt)
head(pen_lrt)
pen_mrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_penumpang_mrt.csv")
colnames(pen_mrt)<-c("bulan","tahun","jumlah_penumpang_mrt")
colnames(pen_mrt)
head(pen_mrt)
perj_lrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_perjalanan_lrt.csv")
colnames(perj_lrt)<-c("bulan","tahun","jumlah_perjalanan_lrt")
colnames(perj_lrt)
head(perj_lrt)
perj_mrt<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/jumlah_perjalanan_mrt.csv")
colnames(perj_mrt)<-c("bulan","tahun","jumlah_perjalanan_mrt")
colnames(perj_mrt)
head(perj_mrt)
#lihat data test & samsub
samsub<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/sample_submision.csv")
head(samsub)
test_pen_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/testing_jumlah_penumpang_tj.csv")
head(test_pen_tj)
#data training
train_pen_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/training_jumlah_penumpang_tj.csv")
head(train_pen_tj)
tail(train_pen_tj)
inda <- arm_tj %>%
left_join(pen_lrt, by = c("bulan", "tahun")) %>%
left_join(perj_lrt, by = c("bulan", "tahun")) %>%
left_join(pen_mrt, by = c("bulan", "tahun")) %>%
left_join(perj_mrt, by = c("bulan", "tahun"))
datax<-inda
# Lihat hasil penggabungan
head(datax)
full_dates<-expand.grid(
bulan=1:12,
tahun=2015:2024
)
train_data_full<-full_dates %>%
left_join(train_pen_tj,by=c("bulan","tahun"))
#gabung data x dengan tanggal penuh dan isi NA dengan nile yang proper
datax_full<-full_dates %>%
left_join(datax,by=c("bulan","tahun")) %>%
fill(-bulan,-tahun, .direction="downup")
install.packages("tdyr")
library(tidyr)
#gabung data x dengan tanggal penuh dan isi NA dengan nile yang proper
datax_full<-full_dates %>%
left_join(datax,by=c("bulan","tahun")) %>%
fill(-bulan,-tahun, .direction="downup")
head(datax_full)
#gabung datax & datay based bulan & tahun
train_data_combined<-train_data_full %>%
left_join(datax_full,by=c("bulan","tahun"))
head(train_data_combined)
tail(train_data_combined)
tail(datax_full)
head(train_data_full)
tail(train_data_full)
tail(train_data_combined)
#isi NA utk kolom jumlah penumpang
train_data_combined$jumlah_penumpang<-full_dates %>%
left_join(datax,by=c("bulan","tahun")) %>%
fill(-bulan,-tahun, .direction="downup")
head(train_data_combined)
#gabung datax & datay based bulan & tahun
train_data_combined<-train_data_full %>%
left_join(datax_full,by=c("bulan","tahun"))
head(train_data_combined)
tail(train_data_combined)
#memisahkan data x & data y dalam data training
train_x<-train_data_combined %>%
select(-jumlah_penumpang) #hapus kolom data y (target)
#memisahkan data x & data y dalam data training
train_X<-train_data_combined %>%
select(-jumlah_penumpang) #hapus kolom data y (target)
#memisahkan data x & data y dalam data training
train_X <- dplyr::select(train_data_combined, -jumlah_penumpang)
train_y <- train_data_combined$jumlah_penumpang
head(train_X)
tail(train_X)
head(train_y)
tail(train_y)
train_y <- train_data_combined$jumlah_penumpang
head(train_y)
head(train_data_combined)
train_y <- train_data_combined$jumlah_penumpang
head(train_y)
#gabung data x & y utk buat model
train_combined<-cbind(train_X, jumlah_penumpang = train_y)
head(train_combined)
tail(train_combined)
#model awal semua fitur
initial_model<-lm(jumlah_penumpang~.,data = train_combined)
#do stepwise regression
stepwise_model<-step(initial_model,direction = "both")
#ringkasan model akhir
summary(stepwise_model)
test_data<-test_pen_tj
#data test prediksi (januari sd juni 2024)
head(test_data)
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(colnames(train_X)))
colnames(train_X)
colnames(test_X)
colnames(test_data)
#gabung data x ke test_data
test_data<-test_data %>%
left_join(arm_tj,by=c("bulan","tahun")) %>%
left_join(pen_lrt,by=c("bulan","tahun")) %>%
left_join(perj_lrt,by=c("bulan","tahun")) %>%
left_join(pen_mrt,by=c("bulan","tahun")) %>%
left_join(perj_mrt,by=c("bulan","tahun")) %>%
#data test prediksi (januari sd juni 2024)
head(test_data)
#gabung data x ke test_data
test_data<-test_data %>%
left_join(arm_tj,by=c("bulan","tahun")) %>%
left_join(pen_lrt,by=c("bulan","tahun")) %>%
left_join(perj_lrt,by=c("bulan","tahun")) %>%
left_join(pen_mrt,by=c("bulan","tahun")) %>%
left_join(perj_mrt,by=c("bulan","tahun"))
#data test prediksi (januari sd juni 2024)
head(test_data)
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(colnames(train_X)))
colnames(test_data)
colnames(train_X)
test_pen_tj<-read.csv2("D:/@ALMIRA/14. Indaton/4 Round 1/3 Data Running/testing_jumlah_penumpang_tj.csv")
head(test_pen_tj)
test_data<-test_pen_tj
#data test prediksi (januari sd juni 2024)
head(test_data)
colnames(test_data)
colnames(train_X)
#buat file samsub_output
samsub_output<-data.frame(
bulan=1:6,
tahun=rep(2024,6)
)
#data x utk periode januari-juni 2024
auxiliary_samsub<-train_X %>%
filter(tahun==2024 & bulan %in% 1:6)
#gabung data uji (samsub_output) & data auxiliary (data x)
samsub_output<-samsub_output %>%
left_join(auxiliary_samsub,by=c("bulan","tahun"))
#tambah kolom yang sama dengan data training kecuali kolom target
missing_columns<-setdiff(names(train_data_combined),names(samsub_output))
for (col in missing_columns) {
samsub_output[[col]]<-NA
}
#memastikan urutan kolom sama
samsub_output<-samsub_output %>%
select(names(train_data_combined))
#gabung data pelatihan dengan data auxiliary
train_data_combined<-train_pen_tj %>%
left_join(datax_full, by=c("bulan","tahun"))
#buat file samsub_output
samsub_output<-data.frame(
bulan=1:6,
tahun=rep(2024,6)
)
#buat file samsub_output
test_data<-data.frame(
bulan=1:6,
tahun=rep(2024,6)
)
#gabung data uji (test_data) & data auxiliary (data x)
test_data<-test_data %>%
left_join(datax_full,by=c("bulan","tahun"))
#tambah kolom yang sama dengan data training kecuali kolom target
missing_columns<-setdiff(names(train_data_combined),names(test_data))
for (col in missing_columns) {
test_data[[col]]<-NA
}
#memastikan urutan kolom sama
test_data<-test_data %>%
select(names(train_data_combined))
head(train_data_combined)
colnames(train_data_combined)
colnames(test_data)
#memastikan urutan kolom sama
test_data<-test_data %>%
select(names(train_data_combined))
#memastikan urutan kolom sama
test_data<-test_data %>%
select(all_of(names(train_data_combined)))
#memastikan urutan kolom sama
library(dplyr)
test_data<-test_data %>%
select(all_of(names(train_data_combined)))
test_data<-test_data %>%
select(one_of(names(train_data_combined)))
# Menampilkan nama kolom dari train_data_combined dan test_data
print("Kolom train_data_combined:")
print(colnames(train_data_combined))
print("Kolom test_data:")
print(colnames(test_data))
# Memastikan urutan kolom sama menggunakan all_of
test_data <- test_data %>%
select(all_of(names(train_data_combined)))
# Menampilkan urutan kolom pada test_data untuk memastikan sudah sesuai
print("Kolom test_data setelah diatur ulang:")
print(colnames(test_data))
# Menampilkan beberapa baris pertama dari test_data untuk memverifikasi hasil
head(test_data)
print(colnames(train_data_combined))
print(colnames(test_data))
# Mengatur ulang kolom test_data sesuai dengan urutan train_columns
test_data <- test_data[, train_columns]
# Mengatur ulang kolom test_data sesuai dengan urutan train_columns
train_columns<-colnames(train_data_combined)
test_data <- test_data[, train_columns]
test_data<-test_data[,train_columns]
print(colnames(test_data))
print(colnames(train_columns))
print(colnames(train_X))
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(colnames(train_X)))
colnames(train_X)
colnames(test_data)
str(train_X)
str(test_data)
print(colnames(train_columns))
print(train_columns)
# Memeriksa hasil
print(colnames(test_data))
# Mengatur ulang kolom test_data sesuai dengan urutan train_columns
train_columns<-colnames(train_X)
test_data <- test_data[, train_columns]
# Memeriksa hasil
print(colnames(test_data))
print(train_columns)
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(colnames(train_X)))
select(names(all_of(colnames(train_X)))
colnames(train_X)
select(all_of(names(colnames(train_X)))
select(all_of(names(colnames(train_data_combined)))
select(all_of(names(colnames(train_data_combined)))
test_X<-test_data %>%
test_X<-test_data %>%
select(all_of(names(colnames(train_data_combined)))
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
colnames(train_data_combined)
colnames(test_data)
# Mengatur ulang kolom test_data sesuai dengan urutan train_columns
train_columns<-colnames(train_data_combined)
test_data <- test_data[, train_columns]
# Mengatur ulang kolom test_data sesuai dengan urutan train_columns
train_columns<-colnames(train_data_combined)
test_data <- test_data[, train_columns]
train_columns
colnames(test_data)
test_data <- test_data[, train_columns]
test_columns<-colnames(test_data)
train_columns<-colnames(train_data_combined)
#cari kolom yang hilang
missing_columns<-setdiff(train_columns,test_columns)
#menambahkan kolom yang hilang ke test data dengan nilai NA
for (col in missing_columns) {
test_data[[col]] <- NA
}
#mengurutkan kolom test_data sesuai dengan train_columns
test_data <- test_data[.train_columns]
test_columns<-colnames(test_data)
train_columns<-colnames(train_data_combined)
#cari kolom yang hilang
missing_columns<-setdiff(train_columns,test_columns)
#menambahkan kolom yang hilang ke test data dengan nilai NA
for (col in missing_columns) {
test_data[[col]] <- NA
}
#mengurutkan kolom test_data sesuai dengan train_columns
test_data <- test_data[.train_columns]
#mengurutkan kolom test_data sesuai dengan train_columns
test_data <- test_data[,train_columns]
#memastikan urutan kolom test_data
print("Kolom test_data setelah diatur ulang:")
print(colnames(test_data))
head(test_data)
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_columns)))
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
print(colnames(test_data))
print(colnames(train_data_combined))
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
library(dplyr)
# Verifikasi bahwa semua kolom dari train_data_combined ada di test_data
missing_cols <- setdiff(names(train_data_combined), names(test_data))
print(missing_cols)
# Menampilkan nama kolom dari train_data_combined dan test_data
print("Kolom train_data_combined:")
print(colnames(train_data_combined))
print("Kolom test_data:")
print(colnames(test_data))
# Mengatur ulang kolom test_data sesuai dengan urutan kolom train_data_combined
test_X <- test_data %>%
select(all_of(colnames(train_data_combined)))
# Menampilkan urutan kolom pada test_X untuk memastikan sudah sesuai
print("Kolom test_X setelah diatur ulang:")
print(colnames(test_X))
library(dplyr)
# Pastikan semua kolom dari train_data_combined ada di test_data
test_data <- test_data %>%
select(match(colnames(train_data_combined), colnames(test_data)))
# Mengatur ulang kolom test_data sesuai dengan urutan kolom train_data_combined
test_X <- test_data[, colnames(train_data_combined)]
# Menampilkan urutan kolom pada test_X untuk memastikan sudah sesuai
print("Kolom test_X setelah diatur ulang:")
print(colnames(test_X))
# Menampilkan beberapa baris pertama dari test_X untuk memverifikasi hasil
head(test_X)
# Cek struktur data dari kedua dataset
cat("Struktur train_data_combined:\n")
str(train_data_combined)
cat("\nStruktur test_data:\n")
str(test_data)
# Mengubah tipe data kolom di test_data
test_data$tahun <- as.integer(test_data$tahun)
test_data$jumlah_penumpang <- as.integer(test_data$jumlah_penumpang)
# Memeriksa ulang struktur data untuk memastikan semuanya konsisten
cat("\nStruktur test_data setelah perubahan:\n")
str(test_data)
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
# Menghapus kolom 'jumlah_penumpang' dengan menggunakan indeks
test_data <- test_data[, !(colnames(test_data) %in% "jumlah_penumpang")]
#cek dulu test_data punya fitur yang sama dengan train_data
test_X<-test_data %>%
select(all_of(names(train_data_combined)))
#ringkasan model akhir
summary(stepwise_model)
#=======prediksi
# 1. Persiapkan data untuk prediksi
# Pastikan test_data memiliki fitur yang sama dengan data pelatihan, tetapi tanpa kolom target
test_data <- test_data %>%
select(all_of(names(train_data_combined)[-which(names(train_data_combined) == "jumlah_penumpang")]))
